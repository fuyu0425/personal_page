[{"authors":["admin"],"categories":null,"content":"I am a CS PhD student supervised by Prof. Taesoo Kim in the SSLab at Georgia Tech.\nMy research interests include software security, software verification, and software engineering. More generally, I care about the security and correctness of software.\nBefore joing Georgia Tech, I was a research assitant at Acaedmia Sinica, the top research institute in Taiwan. I got my bechalor degree in computer science from National Chiao Tung University.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1687401417,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://yfu.tw/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a CS PhD student supervised by Prof. Taesoo Kim in the SSLab at Georgia Tech.\nMy research interests include software security, software verification, and software engineering. More generally, I care about the security and correctness of software.\nBefore joing Georgia Tech, I was a research assitant at Acaedmia Sinica, the top research institute in Taiwan. I got my bechalor degree in computer science from National Chiao Tung University.","tags":null,"title":"","type":"authors"},{"authors":["Yu-Fu Fu","Jaehyuk Lee","Taesoo Kim"],"categories":[],"content":"","date":1691635493,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687401417,"objectID":"7eea8f7a265da1afaadabfb1f2e9d392","permalink":"https://yfu.tw/publication/sec23-autofz/","publishdate":"2023-02-24T21:44:53-05:00","relpermalink":"/publication/sec23-autofz/","section":"publication","summary":"Fuzzing has gained in popularity for software vulnerability detection by virtue of the tremendous effort to develop a diverse set of fuzzers. Thanks to various fuzzing techniques, most of the fuzzers have been able to demonstrate great performance on their selected targets. However, paradoxically, this diversity in fuzzers also made it difficult to select fuzzers that are best suitable for complex real-world programs, which we call selection burden. Communities attempted to address this problem by creating a set of standard benchmarks to compare and contrast the performance of fuzzers for a wide range of applications, but the result was always a suboptimal decision - the best performing fuzzer on average does not guarantee the best outcome for the target of a user's interest.\n\n To overcome this problem, we propose an automated, yet non-intrusive meta-fuzzer, called autofz, to maximize the benefits of existing state-of-the-art fuzzers via dynamic composition. To an end user, this means that, instead of spending time on selecting which fuzzer to adopt (similar in concept to hyperparameter tuning in ML), one can simply put all of the available fuzzers to autofz (similar in concept to AutoML), and achieve the best, optimal result. The key idea is to monitor the runtime progress of the fuzzers, called trends (similar in concept to gradient descent), and make a fine-grained adjustment of resource allocation (e.g., CPU time) of each fuzzer. This is a stark contrast to existing approaches that statically combine a set of fuzzers, or via exhaustive pre-training per target program - autofz deduces a suitable set of fuzzers of the active workload in a fine-grained manner at runtime. Our evaluation shows that, given the same amount of computation resources, autofz outperforms any best-performing individual fuzzers in 11 out of 12 available benchmarks and beats the best, collaborative fuzzing approaches in 19 out of 20 benchmarks without any prior knowledge in terms of coverage. Moreover, on average, autofz found 152% more bugs than individual fuzzers on unifuzz and fts, and 415% more bugs than collaborative fuzzing on unifuzz.","tags":[],"title":"autofz: Automated Fuzzer Composition at Runtime","type":"publication"},{"authors":["Xiaomu Shi","Yu-Fu Fu","Jiaxiang Liu","Ming-Hsien Tsai","Bow-Yaw Wang","Bo-Yin Yang"],"categories":[],"content":"","date":1623684731,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687401417,"objectID":"6f5020013f584190d8926be96011a328","permalink":"https://yfu.tw/publication/cav21-coq-qfbv/","publishdate":"2021-06-14T11:32:11-04:00","relpermalink":"/publication/cav21-coq-qfbv/","section":"publication","summary":"We present a certiﬁed SMT QF BV solver CoqQFBV built from a veriﬁed bit blasting algorithm, Kissat, and the veriﬁed SAT certiﬁcate checker GratChk in this paper. Our veriﬁed bit blasting algorithm supports the full QF BV logic of SMT-LIB; it is speciﬁed and formally veriﬁed in the proof assistant Coq. We compare CoqQFBV with CVC4, Bitwuzla, and Boolector on benchmarks from the QF BV division of the single query track in the 2020 SMT Competition, and real-world cryptographic program veriﬁcation problems. CoqQFBV surprisingly solves more program veriﬁcation problems with certiﬁcation than the 2020 SMT QF BV division winner Bitwuzla without certiﬁcation.","tags":[],"title":"CoqQFBV: A Scalable Certiﬁed SMT Quantiﬁer-Free Bit-Vector Solver","type":"publication"},{"authors":["Yu-Fu Fu","Jiaxiang Liu","Xiaomu Shi","Ming-Hsien Tsai","Bow-Yaw Wang","Bo-Yin Yang"],"categories":[],"content":"","date":1573479893,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1687401417,"objectID":"c117f2e1b207481dd568127f26fab93a","permalink":"https://yfu.tw/publication/ccs19-signed-cryptoline-gcc/","publishdate":"2019-10-11T21:44:53+08:00","relpermalink":"/publication/ccs19-signed-cryptoline-gcc/","section":"publication","summary":"We develop an automated formal technique to specify and verify signed computation in cryptographic programs. In addition to new instructions, we introduce a type system to detect type errors in programs. A type inference algorithm is also provided to deduce types and instruction variants in cryptographic programs. In order to verify signed cryptographic C programs, we develop a translator from the GCC intermediate representation to our language. Using our technique, we have verified 82 C functions in cryptography libraries including NaCl, wolfSSL, bitcoin, OpenSSL, and BoringSSL.","tags":[],"title":"Signed Cryptographic Program Verification with Typed CryptoLine","type":"publication"}]